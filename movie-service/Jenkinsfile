pipeline {
    environment {
        DOCKER_ID = 'scornedevops'
        DOCKER_IMAGE = 'movie-service'
        DOCKER_TAG = "v.${BUILD_ID}.0"
    }
    agent any
    stages {
        stage('Build') {
            steps {
                dir("${DOCKER_IMAGE}") {
                    sh "docker build -t $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG ."
                }
            }
        }

        stage('Run') {
            steps {
                script {
                    sh """
                      docker rm -f $DOCKER_IMAGE || true
                      docker run -d -p 8081:80 --name $DOCKER_IMAGE $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG
                      echo "Test terminé : le conteneur s'est lancé sans erreur"
                  """
                }
            }
        }

        stage('Push') {
            steps {
                withCredentials([string(credentialsId: 'DOCKER_HUB_PASS', variable: 'DOCKER_PASS')]) {
                    sh """
                      docker login -u $DOCKER_ID -p $DOCKER_PASS
                      docker push $DOCKER_ID/$DOCKER_IMAGE:$DOCKER_TAG
                  """
                }
            }
        }

        stage('Deploiement en dev') {
            environment
        {
                KUBECONFIG = credentials('config') // we retrieve  kubeconfig from secret file called config saved on jenkins
        }
            steps {
                script {
                    sh '''
                  rm -Rf .kube
                  mkdir .kube
                  cat $KUBECONFIG > .kube/config
                  ls -la
                  cp charts/${DOCKER_IMAGE}-values.yaml values.yml
                  cat values.yml
                  sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                  helm upgrade --install ${DOCKER_IMAGE} charts --values=values.yml --namespace dev
                  '''
                }
            }
        }
        stage('Deploiement en qa') {
            environment
        {
                KUBECONFIG = credentials('config') // we retrieve  kubeconfig from secret file called config saved on jenkins
        }
            steps {
                script {
                    sh '''
                  rm -Rf .kube
                  mkdir .kube
                  cat $KUBECONFIG > .kube/config
                  cp charts/${DOCKER_IMAGE}-values.yaml values.yml
                  cat values.yml
                  sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                  helm upgrade --install ${DOCKER_IMAGE} charts --values=values.yml --namespace qa
                  '''
                }
            }
        }
        stage('Deploiement en staging') {
            environment
        {
                KUBECONFIG = credentials('config') // we retrieve  kubeconfig from secret file called config saved on jenkins
        }
            steps {
                script {
                    sh '''
                  rm -Rf .kube
                  mkdir .kube
                  cat $KUBECONFIG > .kube/config
                  cp charts/${DOCKER_IMAGE}-values.yaml values.yml
                  cat values.yml
                  sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                  helm upgrade --install ${DOCKER_IMAGE} charts --values=values.yml --namespace staging
                  '''
                }
            }
        }
        stage('Deploiement en prod') {
            when {
                 branch 'master'
            }
            environment
        {
                KUBECONFIG = credentials('config') // we retrieve  kubeconfig from secret file called config saved on jenkins
        }
            steps {
                    // Create an Approval Button with a timeout of 15minutes.
                    // this require a manuel validation in order to deploy on production environment
                    timeout(time: 15, unit: 'MINUTES') {
                        input message: 'Do you want to deploy in production ?', ok: 'Yes'
                    }

                    script {
                        sh '''
                        rm -Rf .kube
                        mkdir .kube
                        cat $KUBECONFIG > .kube/config
                        cp charts/${DOCKER_IMAGE}-values.yaml values.yml
                        cat values.yml
                        sed -i "s+tag.*+tag: ${DOCKER_TAG}+g" values.yml
                        helm upgrade --install ${DOCKER_IMAGE} charts --values=values.yml --namespace prod
                        '''
                    }
            }
        }
    }
}

